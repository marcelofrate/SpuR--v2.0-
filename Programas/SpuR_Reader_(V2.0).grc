options:
  parameters:
    author: Frate, M.
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: SpuR - (v2.0) - An Spectral Signature Writer System in Chipless Tags
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: SpuR_Reader_V2_0
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: SpuR _Reader - (V2.0)
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: amplitude
  id: variable_qtgui_label
  parameters:
    comment: ''
    formatter: None
    gui_hint: 2,1,1,1
    label: Amplitude
    type: raw
    value: fun_prob
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [192, 12.0]
    rotation: 0
    state: enabled
- name: freqc
  id: variable
  parameters:
    comment: ''
    value: python_mod.sweeper(fun_prob)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 220.0]
    rotation: 0
    state: true
- name: frequency
  id: variable_qtgui_label
  parameters:
    comment: ''
    formatter: None
    gui_hint: 2,0,1,1
    label: Frequency
    type: real
    value: python_mod.sweeper(fun_prob)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [320, 12.0]
    rotation: 0
    state: enabled
- name: fun_prob
  id: variable_function_probe
  parameters:
    block_id: probSign
    comment: ''
    function_args: ''
    function_name: level
    poll_rate: 100e6
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 12.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '50000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 148.0]
    rotation: 0
    state: enabled
- name: analog_sig_source
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '10'
    comment: ''
    freq: '0.00001'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    showports: 'False'
    type: float
    waveform: analog.GR_CONST_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 116.0]
    rotation: 0
    state: enabled
- name: complex_to_mag
  id: blocks_complex_to_mag
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 308.0]
    rotation: 0
    state: true
- name: hilbert
  id: hilbert_fc
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_taps: '500'
    win: window.WIN_RECTANGULAR
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 188.0]
    rotation: 0
    state: enabled
- name: iio_pluto_sink
  id: iio_pluto_sink
  parameters:
    affinity: ''
    alias: ''
    attenuation1: '0'
    bandwidth: '1000000'
    buffer_size: '1000'
    comment: ''
    cyclic: 'True'
    filter: ''
    filter_source: '''Auto'''
    fpass: '0'
    frequency: freqc
    fstop: '0'
    len_tag_key: ''
    samplerate: samp_rate
    type: fc32
    uri: ip:192.168.2.1
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 108.0]
    rotation: 0
    state: enabled
- name: iio_pluto_source
  id: iio_pluto_source
  parameters:
    affinity: ''
    alias: ''
    bandwidth: '1000000'
    bbdc: 'False'
    buffer_size: '1000'
    comment: ''
    filter: ''
    filter_source: '''Auto'''
    fpass: '0'
    frequency: freqc
    fstop: '0'
    gain1: '''manual'''
    len_tag_key: packet_len
    manual_gain1: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    quadrature: 'False'
    rfdc: 'False'
    samplerate: samp_rate
    type: fc32
    uri: ip:192.168.2.1
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 292.0]
    rotation: 0
    state: enabled
- name: moving_average
  id: blocks_moving_average_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    length: '100000'
    max_iter: '10000'
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '0.00001'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 340.0]
    rotation: 0
    state: enabled
- name: probSign
  id: blocks_probe_signal_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 412.0]
    rotation: 0
    state: true
- name: python_mod
  id: epy_module
  parameters:
    alias: ''
    comment: ''
    source_code: "#**********************************************#\n#   Programa Leitor\
      \ de Tags Chipless de RFID   #\n#\t\t\t\t\tV:2.0\t\t\t\t\t   #\n#**********************************************#\n\
      import csv\nimport matplotlib\nmatplotlib.use('Agg')\nimport matplotlib.pyplot\
      \ as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport threading\n\
      from collections import Counter\nfrom matplotlib.ticker import FuncFormatter\n\
      from pandas.plotting import table\nfrom scipy.spatial import distance\nfrom\
      \ scipy.spatial.distance import minkowski, chebyshev\nfrom scipy import interpolate\n\
      from scipy.stats import pearsonr\n\nF1 =   78000000\nF2 = 6000000000\nstep =\
      \  1000000\nf =    70000000\nf_minima = 1500000000\nf_maxima = 6000000000\n\
      y_minima = -60\ny_maxima = 20\ntag_mais_provavel = None\nsinais_rf = []\npasta_principal\
      \ = '/mnt/d/SpuR_(v2.0)/BD'\nBD = 'SpuR_v2.0_BD.csv'\nlock = threading.Lock()\n\
      num_attempts = 4\nleitura_concluida = False\n\n#***********************************************#\n\
      #    ID da tag RFID que est\xE1 sendo Lida no BD   #\n#\t\t\t\t\t\t\t\t\t\t\t\
      \t#\nID = \"Teste\"\t\t\t\t\t\t\t\t\t#\n#\t\t\t\t\t\t\t\t\t\t\t\t#\n#\t\t\t\t\
      \t\t\t\t\t\t\t\t#\n#***********************************************#  \n\ndef\
      \ sweeper(prob_lvl):\n    global f, sinais_rf, leitura_concluida, ID, F1, F2,\
      \ step, banco_de_dados\n    if f < F1 or (prob_lvl is None and leitura_concluida):\n\
      \        f += step\n        return f\n    if prob_lvl and not leitura_concluida:\n\
      \        sinais_rf.append((f, prob_lvl))\n        f += step\n        if f >\
      \ F2+1 and not leitura_concluida:\n            sinais_rf_tratados = [] \n  \
      \          for sinal in sinais_rf:\n                sinais_rf_tratados.append(tratar_real(*sinal))\n\
      \            configurar_parametros()\n            banco_de_dados = ler_banco_de_dados()\n\
      \            tag_mais_provavel, comparacoes = identificar_tag_mais_provavel(banco_de_dados,\
      \ sinais_rf_tratados)\n            banco_de_dados_tratados = tratar_banco_de_dados(banco_de_dados,\
      \ tag_mais_provavel)\n            salvar_dados(tag_mais_provavel, sinais_rf_tratados,\
      \ banco_de_dados)\n            criar_tabela_comparacao(comparacoes, tag_mais_provavel)\n\
      \            plotar_graficos(sinais_rf_tratados, banco_de_dados, tag_mais_provavel,\
      \ pasta_principal, ID, 'png')\n            sinais_rf = []\n            leitura_concluida\
      \ = True\n            f -= step\n        return f\n\ndef tratar_real(f, prob_lvl):\n\
      \    freq = f\n    amplitude = prob_lvl\n    magnitude = prob_lvl if prob_lvl\
      \ >= 0 else -prob_lvl\n    fase = 0 if prob_lvl >= 0 else np.pi\n    potencia_absoluta\
      \ = calcular_potencia_absoluta(magnitude, fase)\n    potencia_dbm = calcular_potencia_dbm(potencia_absoluta)\n\
      \    return {\"frequencia\": freq,  \"magnitude\": magnitude, \"potencia_dbm\"\
      : potencia_dbm}\n\ndef ler_banco_de_dados():\n    caminho_arquivo = f'{pasta_principal}/{BD}'\n\
      \    banco_de_dados = pd.read_csv(caminho_arquivo)\n    return banco_de_dados\n\
      \ndef identificar_tag_mais_provavel(banco_de_dados, leitura):\n    distancias\
      \ = calcular_distancias(banco_de_dados, leitura)\n    if len(distancias) > 0\
      \ and len(distancias[0]) > 0:\n        tags_com_minimos = [min(distancias, key=lambda\
      \ x: x[i])[0] for i in range(1, len(distancias[0])) if len(distancias[0]) >\
      \ i]\n        contagem_tags = Counter(tags_com_minimos)\n        tag_mais_provavel\
      \ = contagem_tags.most_common(1)[0][0]\n    else:\n        tag_mais_provavel\
      \ = None\n\n    return tag_mais_provavel, distancias\n\ndef tratar_banco_de_dados(banco_de_dados,\
      \ tag_mais_provavel):\n    df = pd.DataFrame(banco_de_dados)\n    banco_de_dados_tratados\
      \ = []\n    for coluna in df.columns:\n        if 'Tag_ID_' in coluna:\n   \
      \         ID_str = coluna.split('_')[-1]\n            ID_str = ''.join(filter(str.isdigit,\
      \ ID_str))\n            ID = int(ID_str)\n            for index, row in df.iterrows():\n\
      \                f = row['frequencia']\n                prob_lvl = row[coluna]\n\
      \                if ID == tag_mais_provavel:\n                    dado_tratado\
      \ = tratar_real(f, prob_lvl)\n                    banco_de_dados_tratados.append(dado_tratado)\n\
      \    return banco_de_dados_tratados\n\ndef salvar_dados(tag_mais_provavel, sinais_rf_tratados,\
      \ banco_de_dados):\n    pasta_principal = criar_pastas(tag_mais_provavel)\n\
      \    caminho_arquivo_lido = os.path.join(pasta_principal, 'Tags_Lidas', f'Tag_Mais_Provavel_{tag_mais_provavel}',\
      \ f'Tag_Lida_{tag_mais_provavel}.csv')\n    caminho_arquivo_comparado = os.path.join(pasta_principal,\
      \ 'Tags_Lidas', f'Tag_Mais_Provavel_{tag_mais_provavel}', f'Tag_Comparada_{tag_mais_provavel}.csv')\n\
      \    salvar_em_csv(sinais_rf_tratados, caminho_arquivo_lido)\n    salvar_em_csv(banco_de_dados,\
      \ caminho_arquivo_comparado)\n\n\n\ndef criar_tabela_comparacao(comparacoes,\
      \ tag_mais_provavel):\n    pasta_principal = '/mnt/d/SpuR_(v2.0)/BD'\n    df\
      \ = pd.DataFrame(comparacoes, columns=['Tag', 'Dist\xE2ncia Euclidiana', 'Dist\xE2\
      ncia Manhattan', 'Dist\xE2ncia Chebyshev', 'Correla\xE7\xE3o'])\n    # Convertendo\
      \ a coluna 'Tag' para num\xE9rico\n    df['Tag'] = pd.to_numeric(df['Tag'],\
      \ errors='coerce')\n    # Calcula a tag de menor dist\xE2ncia para cada modelo\n\
      \    menor_distancia = df.min()\n    # Adiciona a linha de menor dist\xE2ncia\
      \ ao DataFrame\n    df = df.append(menor_distancia, ignore_index=True)\n   \
      \ # Salva o DataFrame como um arquivo CSV sem \xEDndice\n    df.to_csv(f'{pasta_principal}/Tags_Lidas/Tag_Mais_Provavel_{tag_mais_provavel}/tabela_comparacao_{tag_mais_provavel}.csv',\
      \ index=False)\n    # Salva o DataFrame como um arquivo TXT sem \xEDndice\n\
      \    with open(f'{pasta_principal}/Tags_Lidas/Tag_Mais_Provavel_{tag_mais_provavel}/tabela_comparacao_{tag_mais_provavel}.txt',\
      \ 'w') as f:\n        f.write(df.to_string(index=False))\n   # Cria e salva\
      \ a tabela como uma imagem PNG e PDF\n    fig, ax = plt.subplots(figsize=(12,\
      \ 4))\n    ax.axis('off')\n    tbl = table(ax, df, cellLoc = 'center', loc='center')\n\
      \    tbl.auto_set_font_size(False)\n    tbl.set_fontsize(10)\n    tbl.scale(1,\
      \ 1.5)\n    ax.set_title(f'Tag mais prov\xE1vel N\xBA {tag_mais_provavel}')\
      \  # Define o t\xEDtulo da tabela\n    plt.tight_layout()\n    plt.savefig(f'{pasta_principal}/Tags_Lidas/Tag_Mais_Provavel_{tag_mais_provavel}/tabela_comparacao_{tag_mais_provavel}.png',\
      \ dpi=600)\n    plt.savefig(f'{pasta_principal}/Tags_Lidas/Tag_Mais_Provavel_{tag_mais_provavel}/tabela_comparacao_{tag_mais_provavel}.pdf')\n\
      \ndef plotar_graficos(sinais_rf_tratados, banco_de_dados, tag_mais_provavel,\
      \ pasta_principal, ID, formato):\n    if sinais_rf_tratados:\n        df_real\
      \ = pd.DataFrame(sinais_rf_tratados)\n        df_banco = pd.DataFrame(banco_de_dados)\n\
      \        coluna_banco_mag = f'mag_(Tag_ID_{tag_mais_provavel})'\n        plotar_grafico(df_real,\
      \ df_banco, 'magnitude', coluna_banco_mag, f'Magnitude vs Frequ\xEAncia - Tag\
      \ Mais Prov\xE1vel {tag_mais_provavel}', 'Magnitude (V)', f'Magnitude_{tag_mais_provavel}',\
      \ pasta_principal, ID, formato, -1, 1.5, tag_mais_provavel)\n        coluna_banco_dbm\
      \ = 'potencia_dbm'\n        df_banco_dbm = converter_para_dbm(df_banco, coluna_banco_mag)\n\
      \        plotar_grafico(df_real, df_banco_dbm, 'potencia_dbm', coluna_banco_dbm,\
      \ f'Pot\xEAncia Absoluta vs Frequ\xEAncia- Tag Mais Prov\xE1vel {tag_mais_provavel}',\
      \ 'Pot\xEAncia Absoluta (dBm)', f'Potencia_dBm_{tag_mais_provavel}', pasta_principal,\
      \ ID, formato, -40, 20, tag_mais_provavel)\n\ndef converter_para_dbm(df, coluna_magnitude):\n\
      \    mag = df[coluna_magnitude]\n    pot_dbm = []\n    for magnitude in mag:\n\
      \        pot = (magnitude**2) / 50\n        pot_dbm.append(10 * np.log10(pot\
      \ * 1000))\n    df['potencia_dbm'] = pot_dbm\n    return df\n\ndef configurar_parametros():\n\
      \    plt.rcParams['lines.linewidth'] = 2\n    plt.rcParams['lines.color'] =\
      \ 'blue'\n    plt.rcParams['axes.facecolor'] = 'white'\n    plt.rcParams['axes.grid']\
      \ = True\n    plt.rcParams['grid.color'] = 'gray'\n    plt.rcParams['xtick.labelsize']\
      \ = 12\n    plt.rcParams['ytick.labelsize'] = 12\n    plt.rcParams['figure.figsize']\
      \ = [10, 5]\n    plt.rcParams['font.size'] = 14\n    plt.rcParams['font.family']\
      \ = 'serif'\n    plt.rcParams['legend.loc'] = 'lower right'\n    plt.rcParams['legend.frameon']\
      \ = True\n    plt.rcParams['legend.framealpha'] = 0.5\n    plt.rcParams['legend.facecolor']\
      \ = 'white'\n    plt.rcParams['legend.edgecolor'] = 'black'\n    plt.rcParams['legend.fontsize']\
      \ = 10\n    plt.legend(title='Tag ID: {ID}')\n    plt.rcParams['legend.title_fontsize']\
      \ = 12\n           \ndef plotar_grafico(df1, df2, coluna, coluna_banco, titulo,\
      \ ylabel, nome_grafico, pasta_principal, ID, formato, y_minimo, y_maximo, tag_mais_provavel):\n\
      \    fig, axs = plt.subplots()\n    formatter = FuncFormatter(format_decimal)\n\
      \    axs.yaxis.set_major_formatter(formatter)\n    axs.plot(df1['frequencia'],\
      \ df1[coluna], label='Sinal Tratado', color='blue')\n    if 'mag_(Tag_ID_{})'.format(tag_mais_provavel)\
      \ in df2.columns:\n        axs.plot(df2['frequencia'], df2[coluna_banco], label='Banco\
      \ de Dados', color='red')\n    axs.set_title(titulo)\n    axs.set_xlabel('Frequ\xEA\
      ncia (GHz)')\n    axs.set_ylabel(ylabel)\n    axs.set_xlim([f_minima, f_maxima])\n\
      \    axs.set_ylim([float(y_minimo), float(y_maximo)])\n    axs.legend(title='Legenda')\n\
      \    caminho_completo = f'{pasta_principal}/Tags_Lidas/Tag_Mais_Provavel_{tag_mais_provavel}'\n\
      \    save_figure(fig, gerar_pasta_figuras(nome_grafico, formato, caminho_completo,\
      \ ID), format='png')\n    plt.close(fig)\n\ndef calcular_potencia_absoluta(magnitude,\
      \ angle):\n    z = magnitude * np.exp(1j * angle)\n    pot = (np.real(z)**2\
      \ + np.imag(z)**2) / 50\n    return pot\n\ndef calcular_potencia_dbm(pot):\n\
      \    if (pot > 0).any():\n        pot_dbm = 10 * np.log10(pot * 1000)\n    \
      \    return pot_dbm\n    else:\n        return None\n\ndef calcular_distancias(banco_de_dados,\
      \ leitura):\n    if isinstance(leitura, list):\n        leitura = pd.DataFrame(leitura)\n\
      \n    banco_de_dados = banco_de_dados[(banco_de_dados['frequencia'] >= F1) &\
      \ (banco_de_dados['frequencia'] <= F2)]\n    leitura = leitura[(leitura['frequencia']\
      \ >= F1) & (leitura['frequencia'] <= F2)]\n    distancias = []\n\n    for coluna\
      \ in banco_de_dados.columns:\n        if coluna.startswith('mag_(Tag_ID_'):\n\
      \            tag_banco = banco_de_dados[coluna]\n            if len(banco_de_dados['frequencia'])\
      \ > 0 and len(tag_banco) > 0:\n                f_banco = interpolate.interp1d(banco_de_dados['frequencia'],\
      \ tag_banco)\n                tag_banco_interp = f_banco(leitura['frequencia'])\n\
      \                #tag_banco_interp = f_banco(banco_de_dados[coluna])\n     \
      \           dist_euclidean = distance.euclidean(leitura['magnitude'], tag_banco_interp)\n\
      \                dist_manhattan = distance.cityblock(leitura['magnitude'], tag_banco_interp)\n\
      \                dist_chebyshev = distance.chebyshev(leitura['magnitude'], tag_banco_interp)\n\
      \                dist_correlation = 1 - pearsonr(leitura['magnitude'], tag_banco_interp)[0]\n\
      \                distancias.append((coluna[len('mag_(Tag_ID_'):-1], dist_euclidean,\
      \ dist_manhattan, dist_chebyshev, dist_correlation))\n    return distancias\n\
      \ndef criar_pastas(tag_mais_provavel):\n    import os\n    if not all(c.isalnum()\
      \ or c in '-_' for c in tag_mais_provavel):\n        raise ValueError(f\"Nome\
      \ de tag inv\xE1lido: {tag_mais_provavel}\")\n    pasta_principal = '/mnt/d/SpuR_(v2.0)/BD'\n\
      \    if not os.path.isdir(pasta_principal):\n        raise FileNotFoundError(f\"\
      Caminho n\xE3o encontrado: {pasta_principal}\")\n    pastas = ['Tags_Lidas',\
      \  f'Tags_Lidas/Tag_Mais_Provavel_{tag_mais_provavel}']\n    for pasta in pastas:\n\
      \        caminho_pasta = os.path.join(pasta_principal, pasta)\n        os.makedirs(caminho_pasta,\
      \ exist_ok=True)\n    return pasta_principal\n\n\ndef salvar_em_csv(dados, caminho_arquivo):\n\
      \    import pandas as pd\n    if isinstance(dados, list) and all(isinstance(d,\
      \ dict) for d in dados):\n        df = pd.DataFrame(dados)\n    elif isinstance(dados,\
      \ pd.DataFrame):\n        df = dados\n    else:\n        raise ValueError(\"\
      Os dados devem ser uma lista de dicion\xE1rios ou um DataFrame do pandas\")\n\
      \    df.to_csv(caminho_arquivo, index=False)\n\ndef format_decimal(x, pos):\n\
      \    # Converte um n\xFAmero em uma string formatada com duas casas decimais.\n\
      \    return '{:.2f}'.format(x)\n\ndef gerar_pasta_figuras(nome_grafico, formato,\
      \ caminho_completo, ID):\n    caminho_pasta = f'{caminho_completo}'\n    os.makedirs(caminho_pasta,\
      \ exist_ok=True)\n    return f'{caminho_pasta}/{nome_grafico}.{formato}'\n\n\
      def save_figure(fig, path, dpi=300, format='png'):\n    num_attempts = 3\n \
      \   for attempt in range(num_attempts):\n        fig.savefig(path, dpi=dpi,\
      \ format=format)\n        if os.path.isfile(path):\n            break\n"
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [656, 20.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: red
    color10: dark blue
    color2: blue
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'True'
    entags: 'True'
    grid: 'True'
    gui_hint: ''
    label1: Real
    label10: Signal 10
    label2: Im
    label3: Power (mW)
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '2048'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '2'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_TAG
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '"packet_len"'
    type: float
    update_time: '0.001'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: (mV)
    ymax: '1'
    ymin: '0'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 292.0]
    rotation: 0
    state: true

connections:
- [analog_sig_source, '0', hilbert, '0']
- [complex_to_mag, '0', moving_average, '0']
- [hilbert, '0', iio_pluto_sink, '0']
- [iio_pluto_source, '0', complex_to_mag, '0']
- [moving_average, '0', probSign, '0']
- [moving_average, '0', qtgui_time_sink, '0']

metadata:
  file_format: 1
  grc_version: 3.10.7.0
